{"version":3,"sources":["../node_modules/bs58/index.js","../../src/rpc/JrpcClient.ts","../../src/rpc/solanaRpcMiddlewares.ts","../../src/providers/injectedProviders/base/baseInjectedProvider.ts","../../src/providers/injectedProviders/base/providerHandlers.ts","../../src/providers/injectedProviders/injectedProviderProxy.ts","../../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../../src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../../src/providers/injectedProviders/slope/providerHandlers.ts","../../src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../../src/providers/injectedProviders/solflare/providerHandlers.ts","../../src/providers/injectedProviders/sollet/solletInjectedProvider.ts","../../src/providers/injectedProviders/sollet/providerHandlers.ts","../../src/providers/injectedProviders/torus/providerHandlers.ts","../../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../../src/solanaWallet.ts","../../src/Layout.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../src/utils.ts","../../src/error.ts","../../src/struct.ts","../../src/structs/utilities.ts","../../src/structs/types.ts","../node_modules/@babel/runtime/helpers/esm/toArray.js","../../src/structs/coercions.ts","../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/layout.ts","../../src/util/bigint.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/sysvar.ts","../../src/transaction-constants.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/transaction.ts","../../src/util/assert.ts","../../src/system-program.ts","../../src/address-lookup-table-program.ts","../../src/bpf-loader-deprecated.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../src/compute-budget.ts","../../node_modules/fast-stable-stringify/index.js","../../src/util/url-impl.ts","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/__forks__/browser/fetch-impl.ts","../../src/util/tx-expiry-custom-errors.ts","../../src/connection.ts","../../src/util/makeWebsocketUrl.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/vote-program.ts","../node_modules/borsh/lib/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../node_modules/bigint-buffer/dist/browser.js","../node_modules/rpc-websockets/dist/index.browser.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/@solana/web3.js/node_modules/secp256k1/elliptic.js","../node_modules/@solana/web3.js/node_modules/secp256k1/lib/index.js","../node_modules/@solana/web3.js/node_modules/secp256k1/lib/elliptic.js"],"names":["basex","require","module","exports","req","res","end","next","chainId","mergeMiddleware","createChainIdMiddleware","createProviderConfigMiddleware","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","createConfigMiddleware","getAccounts","createAsyncMiddleware","method","accounts","response","requestAccounts","handler","result","getSecretKey","createRequestAccountsMiddleware","createGetAccountsMiddleware","createGenericJRPCMiddleware","constructor","state","config","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","switchChain","Promise","setupProvider","engine","providerHandlers","solanaMiddleware","createSolanaMiddleware","configMiddleware","injectedProviderProxy","provider","providerFromEngine","lookupNetwork","getInjectedProviderProxy","getBaseProviderHandlers","injectedProvider","bs58","getPrivateKey","ethErrors","signTransaction","transaction","signMessage","message","signAllTransactions","signAndSendTransaction","txRes","signature","getProviderHandlers","createInjectedProviderProxyMiddleware","data","txMessage","publicKey","getProviderEngineProxy","code","params","conn","allTxns","length","unsignedTx","i","getSlopeHandlers","solflareProviderHandlers","getSolflareHandlers","getSolletHandlers","getTorusHandlers","transactions","connectedChainId","connectedHexChainId","isHexStrict","parseInt","WalletInitializationError","setupEngine","handleInjectedProviderUpdate","_objectSpread","keyPairGenerator","Keypair","Buffer","keyPair","signedMsg","nacl","_providerEngineProxy","sig","txns","enable","privKey","createJsonRpcClient","updateAccount","health","getChainSwitchMiddleware","chainSwitchHandlers","addNewChainConfig","nativeCurrency","rpcUrls","ticker","tickerName","displayName","blockExplorer","switchSolanaChain","createChainSwitchMiddleware","getAccountMiddleware","accountHandlers","updatePrivatekey","privateKey","createAccountMiddleware","SolanaPrivateKeyProvider","providerFactory","SolanaWallet","signedTransaction","signedTransactions","request","Layout","n","b","discr","span","this","offset","_objectWithoutProperties","source","excluded","key","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","toFailures","run","StructError","failure","failures","rest","path","msg","cached","TypeError","isObject","x","print","value","JSON","shiftIterator","input","done","undefined","toFailure","context","struct","branch","type","refinement","Symbol","r","options","coerce","mask","ctx","Array","valid","ts","v","s","k","t","Struct","props","coercer","entries","schema","validator","refiner","assert","create","is","validate","tuples","tuple","error","f","define","name","array","Element","boolean","instance","Class","literal","constant","description","never","nullable","number","isNaN","optional","record","Key","Value","string","Elements","Never","Math","union","Structs","arr","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","unknown","condition","toBuffer","val","Error","equal","l","inherits_browserModule","ctor","superCtor","super_","enumerable","writable","configurable","TempCtor","require$$0","require$$1","isSurrogatePair","charCodeAt","htonl","w","zero2","word","zero8","utils","enc","isArray","slice","replace","push","p","c","toString","endian","start","len","m","a","d","e","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","rotr32","ch32","y","z","maj32","p32","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","h","W","inherits","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","g","T1","T2","SHA224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","require$$4","sum32_3","RIPEMD160","j","K","Kh","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","Hash","inner","outer","_init","sha","ripemd","hmac","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","forEach","form","normalize","join","String","fromCharCode","_checkNormalize","HEX","version","defineProperty","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","_log","Logger","levels","DEBUG","INFO","WARNING","makeError","errors","UNKNOWN_ERROR","messageDetails","Uint8Array","hex","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","INVALID_ARGUMENT","argument","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","kind","censorship","permanent","globalLogger","warn","logger","addSlice","arguments","isInteger","arrayify","checkSafeUint53","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","isBytes","encode","serialize","SOLANA_SCHEMA","decode","deserialize","decodeUnchecked","deserializeUnchecked","Map","_bn","isPublicKeyData","decoded","equals","eq","toBase58","toJSON","toBytes","toArrayLike","zeroPad","createWithSeed","buffer","fromPublicKey","programId","PublicKey","createProgramAddressSync","seeds","seed","publicKeyBytes","is_on_curve","createProgramAddress","findProgramAddressSync","nonce","seedsWithNonce","address","err","findProgramAddress","isOnCurve","default","fields","naclLowLevel","chk","den","den2","den4","den6","neq25519","gf1","I","property","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","str","getAlloc","getItemAlloc","item","field","alloc","u64","layout","blob","encodeDecode","bigIntLayout","src","toBigIntLE","toBufferLE","bigInt","encodeData","allocLength","layoutFields","instruction","index","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","NonceAccount","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","PACKET_DATA_SIZE","decodeLength","size","elem","encodeLength","rem_len","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","isAccountSigner","isAccountWritable","numRequiredSignatures","isProgramId","has","programIds","nonProgramIds","filter","numKeys","keyCount","shortvec","map","programIdIndex","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","signData","from","byteArray","accountCount","dataSlice","Message","TransactionStatus","DEFAULT_SIGNATURE","opts","isWritable","pubkey","isSigner","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","blockhash","nonceInstruction","signers","add","items","compileMessage","accountMetas","accountMeta","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","compiledInstructions","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","getEstimatedFee","connection","setSigners","seen","sign","uniqueSigners","signer","_partialSign","partialSign","addSignature","_addSignature","findIndex","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","populate","sigPubkeyPair","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","createAccount","lamports","space","transfer","BigInt","assign","base","createAccountWithSeed","createNonceAccount","SystemProgram","fromPubkey","newAccountPubkey","basePubkey","initParams","noncePubkey","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","createLookupTable","recentSlot","bumpSeed","freezeLookupTable","extendLookupTable","addresses","addr","deactivateLookupTable","closeLookupTable","AddressLookupTableProgram","sendOptions","skipPreflight","preflightCommitment","maxRetries","minContextSlot","status","sleep","ms","resolve","setTimeout","getMinNumSignatures","Loader","load","balanceNeeded","program","programInfo","accountPubkey","payer","toPubkey","sendAndConfirmTransaction","commitment","dataLayout","chunkSize","bytesLength","bytesLengthPadding","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","ComputeBudgetProgram","objToString","objKeys","obj","isArrayProp","max","propVal","toStr","sort","isFinite","returnVal","URL","globalThis","trailingZeros","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","slot","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","logs","customMessage","TransactionExpiredBlockheightExceededError","timeoutSeconds","TransactionExpiredTimeoutError","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","createRpcResult","pick","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","executable","owner","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","_commitment","_confirmTransactionInitialTimeout","_rpcEndpoint","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","Set","client","wsEndpoint","httpHeaders","fetch","disableRetryOnRateLimit","endpoint","useHttps","Number","makeWebsocketUrl","customFetch","fetchWithMiddleware","init","modifiedInfo","reject","modifiedFetchArgs","clientBrowser","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","callback","createRpcClient","requests","batch","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","bind","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configWithoutEncoding","encoding","getParsedProgramAccounts","confirmTransaction","rawSignature","strategy","decodedSignature","subscriptionCommitment","confirmationPromise","subscriptionId","__type","expiryPromise","timeoutMs","timeoutId","checkBlockHeight","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","clearTimeout","removeSignatureListener","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","getSignatureStatus","getSignatureStatuses","values","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getFeeForMessage","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getBlockHeight","getBlockProduction","configOrCommitment","extra","getTransaction","getParsedTransaction","getParsedTransactions","methodName","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","highestConfirmedRoot","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","timeSinceFetch","Date","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","MS_PER_SLOT","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","originalTx","disableCache","includes","encodedTransaction","includeAccounts","logTrace","traceIndent","sendTransaction","sendRawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","clearInterval","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbacks","cb","_makeSubscription","clientSubscriptionId","fastStableStringify","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","notification","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","dispose","override","onSignature","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","_keypair","keypair","secretKey","generate","fromSecretKey","encoder","fromSeed","ED25519_INSTRUCTION_LAYOUT","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","Ed25519Program","createInstructionWithPrivateKey","STAKE_CONFIG_ID","unixTimestamp","custodian","Lockup","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","initialize","lockup","staker","withdrawer","stakePubkey","delegate","authorize","custodianPubkey","newAuthorized","newAuthorizedPubkey","stakeAuthorizationType","authorizeWithSeed","authoritySeed","authorityOwner","splitInstruction","split","splitWithSeed","splitStakePubkey","merge","withdraw","deactivate","StakeProgram","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","publicKeyToEthAddress","sha3","Secp256k1Program","ethAddress","recoveryId","createInstructionWithEthAddress","rawAddress","ethAddressOffset","ethAddressInstructionIndex","pkey","publicKeyCreate","messageHash","recid","website","details","keybaseUsername","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","Voter","initializeAccount","voteInit","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","VoteProgram","__createBinding","o","k2","get","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","mod","__esModule","hasOwnProperty","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","fieldName","splice","maybeResize","writeUInt8","writeUInt16LE","writeUInt32LE","writeBuffer","subarray","writeU32","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","RangeError","readUInt8","readUInt16LE","readUInt32LE","readBuffer","readU32","capitalizeFirstLetter","charAt","toUpperCase","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","idx","deserializeField","reader","readFixedArray","readArray","readU8","set","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","inRange","min","ToDictionary","Stream","tokens","endOfStream","read","shift","prepend","token","pop","finished","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","Boolean","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","ArrayBuffer","byteOffset","byteLength","input_stream","code_points","cp","codePointsToString","opt_string","u","stringToCodePoints","reversed","reverse","toBigIntBE","width","padStart","toBufferBE","_interopRequireDefault","Client","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","_CommonClient","_super","_ref","_ref$autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","generate_request_id","WebSocketBrowserImpl","_EventEmitter","protocols","_this","socket","window","WebSocket","onopen","emit","onmessage","event","onerror","onclose","optionsOrCallback","send","close","listener","addEventListener","EventEmitter","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","CommonClient","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","timeout","ws_opts","_this2","promise","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_x","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","_this4","parse","listeners","then","_ref2","uuid","v4","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","self","isBatch","hasCallback","_parseResponse","responseText","isError","cond","isUint8Array","numbers","isCompressed","toTypeString","getAssertedOutput","output","secp256k1","contextRandomize","privateKeyVerify","seckey","privateKeyNegate","privateKeyTweakAdd","tweak","privateKeyTweakMul","publicKeyVerify","compressed","publicKeyConvert","publicKeyNegate","publicKeyCombine","pubkeys","publicKeyTweakAdd","publicKeyTweakMul","signatureNormalize","signatureExport","outputlen","signatureImport","msg32","noncefn","ecdsaVerify","ecdsaRecover","ecdh","hashfn","xbuf","ybuf","ec","EC","ecparams","curve","BN","loadPublicKey","first","cmp","toRed","red","redSqr","redIMul","redIAdd","redSqrt","isOdd","redNeg","pub","loadCompressedPublicKey","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","point","bn","negate","sub","umod","iadd","isub","tweaked","imul","keyFromPrivate","getPublic","pairs","isInfinity","mul","nh","sigR","sigS","lenR","posR","lenS","posS","_noncefn","counter","canonical","pers","recoveryParam","sigObj","sigr","sigs","verify","recoverPubKey","scalar","getX","getY"],"mappings":"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","file":"static/js/3.b2b08edd.chunk.js","sourcesContent":["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine } from '@toruslabs/base-controllers';\nimport { mergeMiddleware, createAsyncMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport bs58 from 'bs58';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { PublicKey, Connection, Keypair } from '@solana/web3.js';\nimport nacl from '@toruslabs/tweetnacl-js';\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createConfigMiddleware(providerConfig) {\n  const {\n    chainId\n  } = providerConfig;\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction createGetAccountsMiddleware(_ref) {\n  let {\n    getAccounts\n  } = _ref;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"getAccounts\") return next();\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\"); // This calls from the prefs controller\n\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createRequestAccountsMiddleware(_ref2) {\n  let {\n    requestAccounts\n  } = _ref2;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"requestAccounts\") return next();\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\"); // This calls the UI login function\n\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(\"WalletMiddleware - \".concat(targetMethod, \" not provided\"));\n    const result = await handler(request);\n    response.result = result;\n    return undefined;\n  });\n}\nfunction createSolanaMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    requestAccounts,\n    signTransaction,\n    signAndSendTransaction,\n    signAllTransactions,\n    signMessage,\n    getPrivateKey,\n    getSecretKey\n  } = providerHandlers;\n  return mergeMiddleware([createRequestAccountsMiddleware({\n    requestAccounts\n  }), createGetAccountsMiddleware({\n    getAccounts\n  }), createGenericJRPCMiddleware(\"signTransaction\", signTransaction), createGenericJRPCMiddleware(\"signAndSendTransaction\", signAndSendTransaction), createGenericJRPCMiddleware(\"signAllTransactions\", signAllTransactions), createGenericJRPCMiddleware(\"signMessage\", signMessage), createGenericJRPCMiddleware(\"solanaPrivateKey\", getPrivateKey), createGenericJRPCMiddleware(\"solanaSecretKey\", getSecretKey)]);\n}\nfunction createChainSwitchMiddleware(_ref3) {\n  let {\n    addNewChainConfig,\n    switchSolanaChain\n  } = _ref3;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"addSolanaChain\", addNewChainConfig), createGenericJRPCMiddleware(\"switchSolanaChain\", switchSolanaChain)]);\n}\nfunction createAccountMiddleware(_ref4) {\n  let {\n    updatePrivatekey\n  } = _ref4;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"updateAccount\", updatePrivatekey)]);\n}\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass BaseInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$3(_objectSpread$3({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n\n  async setupProvider(injectedProvider) {\n    const engine = new JRPCEngine();\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig);\n    engine.push(configMiddleware);\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async lookupNetwork() {\n    const {\n      chainConfig\n    } = this.config;\n    this.update({\n      chainId: chainConfig.chainId\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  getInjectedProviderProxy(_) {\n    return undefined;\n  }\n\n}\n\nconst getBaseProviderHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [],\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async req => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async req => {\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n    signAllTransactions: async req => {\n      var _req$params, _req$params2;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async req => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return {\n        signature: txRes.signature\n      };\n    }\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction createInjectedProviderProxyMiddleware(provider) {\n  return createAsyncMiddleware(async (req, res, _next) => {\n    const result = await provider.request(_objectSpread$2({}, req));\n    res.result = result;\n  });\n}\n\nclass PhantomInjectedProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  getInjectedProviderProxy(injectedProvider) {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n\n}\n\nconst getSlopeHandlers = (injectedProvider, getProviderEngineProxy) => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      const {\n        data\n      } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const {\n        data\n      } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async req => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({\n        message: \"Invalid transaction message\"\n      });\n      const {\n        data\n      } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      return txMessage;\n    },\n    signMessage: async req => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async req => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({\n        message: \"Invalid transaction message\"\n      });\n      const {\n        data\n      } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      const chainConfig = await provider.request({\n        method: \"solana_provider_config\",\n        params: []\n      });\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return {\n        signature: res\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params, _req$params2, _data$signatures;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const {\n        length\n      } = allTxns;\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n\n      const {\n        msg,\n        data\n      } = await injectedProvider.signAllTransactions(unsignedTx);\n      if (!data.publicKey || ((_data$signatures = data.signatures) === null || _data$signatures === void 0 ? void 0 : _data$signatures.length) !== length) throw new Error(msg);\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, signature);\n      }\n\n      return allTxns;\n    }\n  };\n  return providerHandlers;\n};\n\nclass SlopeInjectedProxyProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n\n}\n\nconst getSolflareHandlers = (injectedProvider, getProviderEngineProxy) => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider);\n\n  solflareProviderHandlers.signAndSendTransaction = async req => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = await provider.request({\n      method: \"solana_provider_config\",\n      params: []\n    });\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return {\n      signature: res\n    };\n  };\n\n  return solflareProviderHandlers;\n};\n\nclass SolflareInjectedProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n\n}\n\nconst getSolletHandlers = (injectedProvider, getProviderEngineProxy) => {\n  const providerHandlers = getBaseProviderHandlers(injectedProvider);\n\n  providerHandlers.signMessage = async req => {\n    const {\n      signature\n    } = await injectedProvider.sign(req.params.message, \"utf8\");\n    return signature;\n  };\n\n  providerHandlers.signAndSendTransaction = async req => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = await provider.request({\n      method: \"solana_provider_config\",\n      params: []\n    });\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return {\n      signature: res\n    };\n  };\n\n  return providerHandlers;\n};\n\nclass SolletInjectedProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n\n}\n\nconst getTorusHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_accounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async req => {\n      var _req$params;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n    signTransaction: async req => {\n      var _req$params2;\n\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return {\n        signature: response\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5;\n\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    }\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass TorusInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n\n  async setupProvider(injectedProvider) {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  async lookupNetwork() {\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Torus solana provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedChainId = await this.provider.request({\n      method: \"solana_chainId\"\n    });\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : \"0x\".concat(parseInt(connectedChainId, 10).toString(16));\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n    this.update({\n      chainId: connectedHexChainId\n    });\n    this.provider.emit(\"connect\", {\n      chainId: this.state.chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  async setupEngine(injectedProvider) {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async handleInjectedProviderUpdate(injectedProvider) {\n    injectedProvider.on(\"accountsChanged\", async accounts => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async chainId => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : \"0x\".concat(parseInt(chainId, 10).toString(16)); // Check if chainId changed and trigger event\n\n      this.configure({\n        chainConfig: _objectSpread$1(_objectSpread$1({}, this.config.chainConfig), {}, {\n          chainId: connectedHexChainId\n        })\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n\n}\n\nasync function getProviderHandlers(_ref) {\n  let {\n    privKey,\n    getProviderEngineProxy\n  } = _ref;\n\n  const keyPairGenerator = () => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n    signTransaction: async req => {\n      var _req$params;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n    signMessage: async req => {\n      var _req$params2;\n\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const _providerEngineProxy = getProviderEngineProxy();\n\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n      const sig = await _providerEngineProxy.request({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())]\n      });\n      return {\n        signature: sig\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5, _req$params6;\n\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = (_req$params6 = req.params) === null || _req$params6 === void 0 ? void 0 : _req$params6.message;\n\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n\n      return txns;\n    }\n  };\n  return providerHandlers;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass SolanaPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(privKey) {\n    const providerHandlers = await getProviderHandlers({\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"requestAccounts\"\n        })\n      });\n    }\n  }\n\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n    await this.setupProvider(privKey);\n  }\n\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const health = await this._providerEngineProxy.request({\n      method: \"getHealth\",\n      params: []\n    });\n    const {\n      chainConfig\n    } = this.config;\n    if (health !== \"ok\") throw WalletInitializationError.rpcConnectionError(\"Failed to lookup network for following rpc target: \".concat(chainConfig.rpcTarget));\n    this.update({\n      chainId: chainConfig.chainId\n    });\n\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", {\n        chainId: this.state.chainId\n      });\n    }\n\n    return this.state.chainId;\n  }\n\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addNewChainConfig: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = req.params;\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"SOL\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n        });\n      },\n      switchSolanaChain: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const {\n          privateKey\n        } = req.params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n\n}\n\n_defineProperty(SolanaPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new SolanaPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nclass SolanaWallet {\n  constructor(provider) {\n    _defineProperty(this, \"provider\", void 0);\n\n    this.provider = provider;\n  }\n\n  async requestAccounts() {\n    const accounts = await this.provider.request({\n      method: \"requestAccounts\",\n      params: {}\n    });\n    return accounts;\n  }\n\n  async signAndSendTransaction(transaction) {\n    const {\n      signature\n    } = await this.provider.request({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction\n      }\n    });\n    return {\n      signature\n    };\n  }\n\n  async signTransaction(transaction) {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction\n      }\n    });\n    return signedTransaction;\n  }\n\n  async signAllTransactions(transactions) {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions\n      }\n    });\n    return signedTransactions;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"signMessage\",\n      params: {\n        message: data\n      }\n    });\n    return response;\n  }\n\n  async request(args) {\n    const result = await this.provider.request(args);\n    return result;\n  }\n\n}\n\nexport { PhantomInjectedProvider, SlopeInjectedProxyProvider, SolanaPrivateKeyProvider, SolanaWallet, SolflareInjectedProvider, SolletInjectedProvider, TorusInjectedProvider };\n//# sourceMappingURL=solanaProvider.esm.js.map\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n        throw new TypeError('b must be a Uint8Array');\n    }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n    constructor(span, property) {\n        if (!Number.isInteger(span)) {\n            throw new TypeError('span must be an integer');\n        }\n        /** The span of the layout in bytes.\n         *\n         * Positive values are generally expected.\n         *\n         * Zero will only appear in {@link Constant}s and in {@link\n         * Sequence}s where the {@link Sequence#count|count} is zero.\n         *\n         * A negative value indicates that the span is value-specific, and\n         * must be obtained using {@link Layout#getSpan|getSpan}. */\n        this.span = span;\n        /** The property name used when this layout is represented in an\n         * Object.\n         *\n         * Used only for layouts that {@link Layout#decode|decode} to Object\n         * instances.  If left undefined the span of the unnamed layout will\n         * be treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n        return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n        if (0 > this.span) {\n            throw new RangeError('indeterminate span');\n        }\n        return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n        const rv = Object.create(this.constructor.prototype);\n        Object.assign(rv, this);\n        rv.property = property;\n        return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n        return undefined;\n    }\n}\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n    if (lo.property) {\n        return name + '[' + lo.property + ']';\n    }\n    return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n        throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n        throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && (layout instanceof Layout))) {\n        throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n        throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = (() => new Class());\n    Object.defineProperty(Class.prototype, 'encode', {\n        value(b, offset) {\n            return layout.encode(this, b, offset);\n        },\n        writable: true,\n    });\n    Object.defineProperty(Class, 'decode', {\n        value(b, offset) {\n            return layout.decode(b, offset);\n        },\n        writable: true,\n    });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n        throw new Error('ExternalLayout is abstract');\n    }\n}\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n            throw new TypeError('elementSpan must be a (positive) integer');\n        }\n        super(-1, property);\n        /** The layout for individual elements of the sequence.  The value\n         * must be a positive integer.  If not provided, the value will be\n         * 1. */\n        this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n        return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const rem = b.length - offset;\n        return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n        return 0;\n    }\n}\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n        if (!(layout instanceof Layout)) {\n            throw new TypeError('layout must be a Layout');\n        }\n        if (!Number.isInteger(offset)) {\n            throw new TypeError('offset must be integer or undefined');\n        }\n        super(layout.span, property || layout.property);\n        /** The subordinated layout. */\n        this.layout = layout;\n        /** The location of {@link OffsetLayout#layout} relative to the\n         * start of another layout.\n         *\n         * The value may be positive or negative, but an error will thrown\n         * if at the point of use it goes outside the span of the Uint8Array\n         * being accessed.  */\n        this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n        return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        return this.layout.encode(src, b, offset + this.offset);\n    }\n}\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - (hi32 * V2E32);\n    return { hi32, lo32 };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readUInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeUInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readUInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n        return 4;\n    }\n}\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n        return 4;\n    }\n}\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n        return 8;\n    }\n}\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n        return 8;\n    }\n}\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n        if (!(elementLayout instanceof Layout)) {\n            throw new TypeError('elementLayout must be a Layout');\n        }\n        if (!(((count instanceof ExternalLayout) && count.isCount())\n            || (Number.isInteger(count) && (0 <= count)))) {\n            throw new TypeError('count must be non-negative integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if ((!(count instanceof ExternalLayout))\n            && (0 < elementLayout.span)) {\n            span = count * elementLayout.span;\n        }\n        super(span, property);\n        /** The layout for individual elements of the sequence. */\n        this.elementLayout = elementLayout;\n        /** The number of elements in the sequence.\n         *\n         * This will be either a non-negative integer or an instance of\n         * {@link ExternalLayout} for which {@link\n         * ExternalLayout#isCount|isCount()} is `true`. */\n        this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        if (0 < this.elementLayout.span) {\n            span = count * this.elementLayout.span;\n        }\n        else {\n            let idx = 0;\n            while (idx < count) {\n                span += this.elementLayout.getSpan(b, offset + span);\n                ++idx;\n            }\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const rv = [];\n        let i = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        while (i < count) {\n            rv.push(this.elementLayout.decode(b, offset));\n            offset += this.elementLayout.getSpan(b, offset);\n            i += 1;\n        }\n        return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n        const elo = this.elementLayout;\n        const span = src.reduce((span, v) => {\n            return span + elo.encode(v, b, offset + span);\n        }, 0);\n        if (this.count instanceof ExternalLayout) {\n            this.count.encode(src.length, b, offset);\n        }\n        return span;\n    }\n}\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n        if (!(Array.isArray(fields)\n            && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n            throw new TypeError('fields must be array of Layout instances');\n        }\n        if (('boolean' === typeof property)\n            && (undefined === decodePrefixes)) {\n            decodePrefixes = property;\n            property = undefined;\n        }\n        /* Verify absence of unnamed variable-length fields. */\n        for (const fd of fields) {\n            if ((0 > fd.span)\n                && (undefined === fd.property)) {\n                throw new Error('fields cannot contain unnamed variable-length layout');\n            }\n        }\n        let span = -1;\n        try {\n            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n        }\n        catch (e) {\n            // ignore error\n        }\n        super(span, property);\n        /** The sequence of {@link Layout} values that comprise the\n         * structure.\n         *\n         * The individual elements need not be the same type, and may be\n         * either scalar or aggregate layouts.  If a member layout leaves\n         * its {@link Layout#property|property} undefined the\n         * corresponding region of the buffer associated with the element\n         * will not be mutated.\n         *\n         * @type {Layout[]} */\n        this.fields = fields;\n        /** Control behavior of {@link Layout#decode|decode()} given short\n         * buffers.\n         *\n         * In some situations a structure many be extended with additional\n         * fields over time, with older installations providing only a\n         * prefix of the full structure.  If this property is `true`\n         * decoding will accept those buffers and leave subsequent fields\n         * undefined, as long as the buffer ends at a field boundary.\n         * Defaults to `false`. */\n        this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        try {\n            span = this.fields.reduce((span, fd) => {\n                const fsp = fd.getSpan(b, offset);\n                offset += fsp;\n                return span + fsp;\n            }, 0);\n        }\n        catch (e) {\n            throw new RangeError('indeterminate span');\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b, offset);\n            }\n            offset += fd.getSpan(b, offset);\n            if (this.decodePrefixes\n                && (b.length === offset)) {\n                break;\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n        const firstOffset = offset;\n        let lastOffset = 0;\n        let lastWrote = 0;\n        for (const fd of this.fields) {\n            let span = fd.span;\n            lastWrote = (0 < span) ? span : 0;\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    lastWrote = fd.encode(fv, b, offset);\n                    if (0 > span) {\n                        /* Read the as-encoded span, which is not necessarily the\n                         * same as what we wrote. */\n                        span = fd.getSpan(b, offset);\n                    }\n                }\n            }\n            lastOffset = offset;\n            offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n        return (lastOffset + lastWrote) - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if ((undefined !== fd.property)\n                && (0 < values.length)) {\n                dest[fd.property] = values.shift();\n            }\n        }\n        return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        let offset = 0;\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return offset;\n            }\n            if (0 > fd.span) {\n                offset = -1;\n            }\n            else if (0 <= offset) {\n                offset += fd.span;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n    constructor(property) {\n        /** The {@link Layout#property|property} to be used when the\n         * discriminator is referenced in isolation (generally when {@link\n         * Union#decode|Union decode} cannot delegate to a specific\n         * variant). */\n        this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n}\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n        if (!((layout instanceof ExternalLayout)\n            && layout.isCount())) {\n            throw new TypeError('layout must be an unsigned integer ExternalLayout');\n        }\n        super(property || layout.property || 'variant');\n        /** The {@link ExternalLayout} used to access the discriminator\n         * value. */\n        this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n        return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n        return this.layout.encode(src, b, offset);\n    }\n}\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n        let discriminator;\n        if ((discr instanceof UInt)\n            || (discr instanceof UIntBE)) {\n            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n        }\n        else if ((discr instanceof ExternalLayout)\n            && discr.isCount()) {\n            discriminator = new UnionLayoutDiscriminator(discr);\n        }\n        else if (!(discr instanceof UnionDiscriminator)) {\n            throw new TypeError('discr must be a UnionDiscriminator '\n                + 'or an unsigned integer layout');\n        }\n        else {\n            discriminator = discr;\n        }\n        if (undefined === defaultLayout) {\n            defaultLayout = null;\n        }\n        if (!((null === defaultLayout)\n            || (defaultLayout instanceof Layout))) {\n            throw new TypeError('defaultLayout must be null or a Layout');\n        }\n        if (null !== defaultLayout) {\n            if (0 > defaultLayout.span) {\n                throw new Error('defaultLayout must have constant span');\n            }\n            if (undefined === defaultLayout.property) {\n                defaultLayout = defaultLayout.replicate('content');\n            }\n        }\n        /* The union span can be estimated only if there's a default\n         * layout.  The union spans its default layout, plus any prefix\n         * variant layout.  By construction both layouts, if present, have\n         * non-negative span. */\n        let span = -1;\n        if (defaultLayout) {\n            span = defaultLayout.span;\n            if ((0 <= span) && ((discr instanceof UInt)\n                || (discr instanceof UIntBE))) {\n                span += discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The interface for the discriminator value in isolation.\n         *\n         * This a {@link UnionDiscriminator} either passed to the\n         * constructor or synthesized from the `discr` constructor\n         * argument.  {@link\n         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n         * `true` iff the `discr` parameter was a non-offset {@link\n         * Layout} instance. */\n        this.discriminator = discriminator;\n        /** `true` if the {@link Union#discriminator|discriminator} is the\n         * first field in the union.\n         *\n         * If `false` the discriminator is obtained from somewhere\n         * else. */\n        this.usesPrefixDiscriminator = (discr instanceof UInt)\n            || (discr instanceof UIntBE);\n        /** The layout for non-discriminator content when the value of the\n         * discriminator is not recognized.\n         *\n         * This is the value passed to the constructor.  It is\n         * structurally equivalent to the second component of {@link\n         * Union#layout|layout} but may have a different property\n         * name. */\n        this.defaultLayout = defaultLayout;\n        /** A registry of allowed variants.\n         *\n         * The keys are unsigned integers which should be compatible with\n         * {@link Union.discriminator|discriminator}.  The property value\n         * is the corresponding {@link VariantLayout} instances assigned\n         * to this union by {@link Union#addVariant|addVariant}.\n         *\n         * **NOTE** The registry remains mutable so that variants can be\n         * {@link Union#addVariant|added} at any time.  Users should not\n         * manipulate the content of this property. */\n        this.registry = {};\n        /* Private variable used when invoking getSourceVariant */\n        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n        /** Function to infer the variant selected by a source object.\n         *\n         * Defaults to {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n         * be overridden using {@link\n         * Union#configGetSourceVariant|configGetSourceVariant}.\n         *\n         * @param {Object} src - as with {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * @returns {(undefined|VariantLayout)} The default variant\n         * (`undefined`) or first registered variant that uses a property\n         * available in `src`. */\n        this.getSourceVariant = function (src) {\n            return boundGetSourceVariant(src);\n        };\n        /** Function to override the implementation of {@link\n         * Union#getSourceVariant|getSourceVariant}.\n         *\n         * Use this if the desired variant cannot be identified using the\n         * algorithm of {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * **NOTE** The provided function will be invoked bound to this\n         * Union instance, providing local access to {@link\n         * Union#registry|registry}.\n         *\n         * @param {Function} gsv - a function that follows the API of\n         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n        this.configGetSourceVariant = function (gsv) {\n            boundGetSourceVariant = gsv.bind(this);\n        };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        /* Default layouts always have non-negative span, so we don't have\n         * one and we have to recognize the variant which will in turn\n         * determine the span. */\n        const vlo = this.getVariant(b, offset);\n        if (!vlo) {\n            throw new Error('unable to determine span for unrecognized variant');\n        }\n        return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n            if (this.defaultLayout && this.defaultLayout.property\n                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n                return undefined;\n            }\n            const vlo = this.registry[src[this.discriminator.property]];\n            if (vlo\n                && ((!vlo.layout)\n                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {\n                return vlo;\n            }\n        }\n        else {\n            for (const tag in this.registry) {\n                const vlo = this.registry[tag];\n                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n                    return vlo;\n                }\n            }\n        }\n        throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n        let dest;\n        const dlo = this.discriminator;\n        const discr = dlo.decode(b, offset);\n        const clo = this.registry[discr];\n        if (undefined === clo) {\n            const defaultLayout = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dest = this.makeDestinationObject();\n            dest[dlo.property] = discr;\n            // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n        }\n        else {\n            dest = clo.decode(b, offset);\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n        const vlo = this.getSourceVariant(src);\n        if (undefined === vlo) {\n            const dlo = this.discriminator;\n            // this.defaultLayout is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const clo = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dlo.encode(src[dlo.property], b, offset);\n            // clo.property is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n        }\n        return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n        const rv = new VariantLayout(this, variant, layout, property);\n        this.registry[variant] = rv;\n        return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n        let variant;\n        if (vb instanceof Uint8Array) {\n            variant = this.discriminator.decode(vb, offset);\n        }\n        else {\n            variant = vb;\n        }\n        return this.registry[variant];\n    }\n}\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n        if (!(union instanceof Union)) {\n            throw new TypeError('union must be a Union');\n        }\n        if ((!Number.isInteger(variant)) || (0 > variant)) {\n            throw new TypeError('variant must be a (non-negative) integer');\n        }\n        if (('string' === typeof layout)\n            && (undefined === property)) {\n            property = layout;\n            layout = null;\n        }\n        if (layout) {\n            if (!(layout instanceof Layout)) {\n                throw new TypeError('layout must be a Layout');\n            }\n            if ((null !== union.defaultLayout)\n                && (0 <= layout.span)\n                && (layout.span > union.defaultLayout.span)) {\n                throw new Error('variant span exceeds span of containing union');\n            }\n            if ('string' !== typeof property) {\n                throw new TypeError('variant must have a String property');\n            }\n        }\n        let span = union.span;\n        if (0 > union.span) {\n            span = layout ? layout.span : 0;\n            if ((0 <= span) && union.usesPrefixDiscriminator) {\n                span += union.discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The {@link Union} to which this variant belongs. */\n        this.union = union;\n        /** The unsigned integral value identifying this variant within\n         * the {@link Union#discriminator|discriminator} of the containing\n         * union. */\n        this.variant = variant;\n        /** The {@link Layout} to be used when reading/writing the\n         * non-discriminator part of the {@link\n         * VariantLayout#union|union}.  If `null` the variant carries no\n         * data. */\n        this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            /* Will be equal to the containing union span if that is not\n             * variable. */\n            return this.span;\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        /* Span is defined solely by the variant (and prefix discriminator) */\n        let span = 0;\n        if (this.layout) {\n            span = this.layout.getSpan(b, offset + contentOffset);\n        }\n        return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        if (this !== this.union.getVariant(b, offset)) {\n            throw new Error('variant mismatch');\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout) {\n            dest[this.property] = this.layout.decode(b, offset + contentOffset);\n        }\n        else if (this.property) {\n            dest[this.property] = true;\n        }\n        else if (this.union.usesPrefixDiscriminator) {\n            dest[this.union.discriminator.property] = this.variant;\n        }\n        return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout\n            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {\n            throw new TypeError('variant lacks property ' + this.property);\n        }\n        this.union.discriminator.encode(this.variant, b, offset);\n        let span = contentOffset;\n        if (this.layout) {\n            this.layout.encode(src[this.property], b, offset + contentOffset);\n            span += this.layout.getSpan(b, offset + contentOffset);\n            if ((0 <= this.union.span)\n                && (span > this.union.span)) {\n                throw new Error('encoded variant overruns containing union');\n            }\n        }\n        return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n        if (this.layout) {\n            return this.layout.fromArray(values);\n        }\n        return undefined;\n    }\n}\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n    if (0 > v) {\n        v += 0x100000000;\n    }\n    return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n    constructor(word, msb, property) {\n        if (!((word instanceof UInt)\n            || (word instanceof UIntBE))) {\n            throw new TypeError('word must be a UInt or UIntBE layout');\n        }\n        if (('string' === typeof msb)\n            && (undefined === property)) {\n            property = msb;\n            msb = false;\n        }\n        if (4 < word.span) {\n            throw new RangeError('word cannot exceed 32 bits');\n        }\n        super(word.span, property);\n        /** The layout used for the packed value.  {@link BitField}\n         * instances are packed sequentially depending on {@link\n         * BitStructure#msb|msb}. */\n        this.word = word;\n        /** Whether the bit sequences are packed starting at the most\n         * significant bit growing down (`true`), or the least significant\n         * bit growing up (`false`).\n         *\n         * **NOTE** Regardless of this value, the least significant bit of\n         * any {@link BitField} value is the least significant bit of the\n         * corresponding section of the packed value. */\n        this.msb = !!msb;\n        /** The sequence of {@link BitField} layouts that comprise the\n         * packed structure.\n         *\n         * **NOTE** The array remains mutable to allow fields to be {@link\n         * BitStructure#addField|added} after construction.  Users should\n         * not manipulate the content of this property.*/\n        this.fields = [];\n        /* Storage for the value.  Capture a variable instead of using an\n         * instance property because we don't want anything to change the\n         * value without going through the mutator. */\n        let value = 0;\n        this._packedSetValue = function (v) {\n            value = fixBitwiseResult(v);\n            return this;\n        };\n        this._packedGetValue = function () {\n            return value;\n        };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b);\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    fd.encode(fv);\n                }\n            }\n        }\n        return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n        const bf = new BitField(this, bits, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n        // This is my Boolean, not the Javascript one.\n        const bf = new Boolean(this, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n}\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n    constructor(container, bits, property) {\n        if (!(container instanceof BitStructure)) {\n            throw new TypeError('container must be a BitStructure');\n        }\n        if ((!Number.isInteger(bits)) || (0 >= bits)) {\n            throw new TypeError('bits must be positive integer');\n        }\n        const totalBits = 8 * container.span;\n        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n        if ((bits + usedBits) > totalBits) {\n            throw new Error('bits too long for span remainder ('\n                + (totalBits - usedBits) + ' of '\n                + totalBits + ' remain)');\n        }\n        /** The {@link BitStructure} instance to which this bit field\n         * belongs. */\n        this.container = container;\n        /** The span of this value in bits. */\n        this.bits = bits;\n        /** A mask of {@link BitField#bits|bits} bits isolating value bits\n         * that fit within the field.\n         *\n         * That is, it masks a value that has not yet been shifted into\n         * position within its containing packed integer. */\n        this.valueMask = (1 << bits) - 1;\n        if (32 === bits) { // shifted value out of range\n            this.valueMask = 0xFFFFFFFF;\n        }\n        /** The offset of the value within the containing packed unsigned\n         * integer.  The least significant bit of the packed value is at\n         * offset zero, regardless of bit ordering used. */\n        this.start = usedBits;\n        if (this.container.msb) {\n            this.start = totalBits - usedBits - bits;\n        }\n        /** A mask of {@link BitField#bits|bits} isolating the field value\n         * within the containing packed unsigned integer. */\n        this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n        /** The property name used when this bitfield is represented in an\n         * Object.\n         *\n         * Intended to be functionally equivalent to {@link\n         * Layout#property}.\n         *\n         * If left undefined the corresponding span of bits will be\n         * treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(word & this.wordMask);\n        const value = wordValue >>> this.start;\n        return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n        if ('number' !== typeof value\n            || !Number.isInteger(value)\n            || (value !== fixBitwiseResult(value & this.valueMask))) {\n            throw new TypeError(nameWithProperty('BitField.encode', this)\n                + ' value must be integer not exceeding ' + this.valueMask);\n        }\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(value << this.start);\n        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n            | wordValue);\n    }\n}\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n    constructor(container, property) {\n        super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n        return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n        if ('boolean' === typeof value) {\n            // BitField requires integer values\n            value = +value;\n        }\n        super.encode(value);\n    }\n}\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n    constructor(length, property) {\n        if (!(((length instanceof ExternalLayout) && length.isCount())\n            || (Number.isInteger(length) && (0 <= length)))) {\n            throw new TypeError('length must be positive integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if (!(length instanceof ExternalLayout)) {\n            span = length;\n        }\n        super(span, property);\n        /** The number of bytes in the blob.\n         *\n         * This may be a non-negative integer, or an instance of {@link\n         * ExternalLayout} that satisfies {@link\n         * ExternalLayout#isCount|isCount()}. */\n        this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n        let span = this.length;\n        if (this.length instanceof ExternalLayout) {\n            span = src.length;\n        }\n        if (!(src instanceof Uint8Array && span === src.length)) {\n            throw new TypeError(nameWithProperty('Blob.encode', this)\n                + ' requires (length ' + span + ') Uint8Array as src');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Uint8Array');\n        }\n        const srcBuffer = uint8ArrayToBuffer(src);\n        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n        if (this.length instanceof ExternalLayout) {\n            this.length.encode(span, b, offset);\n        }\n        return span;\n    }\n}\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n    constructor(property) {\n        super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        let idx = offset;\n        while ((idx < b.length) && (0 !== b[idx])) {\n            idx += 1;\n        }\n        return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        const buffer = uint8ArrayToBuffer(b);\n        srcb.copy(buffer, offset);\n        buffer[offset + span] = 0;\n        return span + 1;\n    }\n}\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n    constructor(maxSpan, property) {\n        if (('string' === typeof maxSpan) && (undefined === property)) {\n            property = maxSpan;\n            maxSpan = undefined;\n        }\n        if (undefined === maxSpan) {\n            maxSpan = -1;\n        }\n        else if (!Number.isInteger(maxSpan)) {\n            throw new TypeError('maxSpan must be an integer');\n        }\n        super(-1, property);\n        /** The maximum span of the layout in bytes.\n         *\n         * Positive values are generally expected.  Zero is abnormal.\n         * Attempts to encode or decode a value that exceeds this length\n         * will throw a `RangeError`.\n         *\n         * A negative value indicates that there is no bound on the length\n         * of the content. */\n        this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        srcb.copy(uint8ArrayToBuffer(b), offset);\n        return span;\n    }\n}\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n    constructor(value, property) {\n        super(0, property);\n        /** The value produced by this constant when the layout is {@link\n         * Constant#decode|decoded}.\n         *\n         * Any JavaScript value including `null` and `undefined` is\n         * permitted.\n         *\n         * **WARNING** If `value` passed in the constructor was not\n         * frozen, it is possible for users of decoded values to change\n         * the content of the value. */\n        this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n        return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n        /* Constants take no space */\n        return 0;\n    }\n}\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = ((property) => new UInt(1, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = ((property) => new UInt(2, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = ((property) => new UInt(3, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = ((property) => new UInt(4, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = ((property) => new UInt(5, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = ((property) => new UInt(6, property));\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = ((property) => new NearUInt64(property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = ((property) => new UIntBE(2, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = ((property) => new UIntBE(3, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = ((property) => new UIntBE(4, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = ((property) => new UIntBE(5, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = ((property) => new UIntBE(6, property));\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = ((property) => new NearUInt64BE(property));\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = ((property) => new Int(1, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = ((property) => new Int(2, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = ((property) => new Int(3, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = ((property) => new Int(4, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = ((property) => new Int(5, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = ((property) => new Int(6, property));\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = ((property) => new NearInt64(property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = ((property) => new IntBE(2, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = ((property) => new IntBE(3, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = ((property) => new IntBE(4, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = ((property) => new IntBE(5, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = ((property) => new IntBE(6, property));\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = ((property) => new NearInt64BE(property));\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = ((property) => new Float(property));\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = ((property) => new FloatBE(property));\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = ((property) => new Double(property));\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = ((property) => new DoubleBE(property));\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n/** Factory for {@link CString} values. */\nexports.cstr = ((property) => new CString(property));\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n/** Factory for {@link Constant} values. */\nexports.constant = ((value, property) => new Constant(value, property));\n//# sourceMappingURL=Layout.js.map","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport * as bigintLayout from './util/bigint';\nimport {SystemProgram} from './system-program';\nimport {TransactionInstruction} from './transaction';\nimport {decodeData, encodeData, IInstructionInputData} from './instruction';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export const URL = globalThis.URL;\nexport const URLSearchParams = globalThis.URLSearchParams;\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {URL} from './util/url-impl';\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: new Message(result.transaction.message),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {URL} from './url-impl';\n\nexport function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n"],"sourceRoot":""}